# Load all the environment variables
from dotenv import load_dotenv
load_dotenv()

# Import necessary libraries
import streamlit as st
import os
import sqlite3
import pandas as pd
import google.generativeai as genai
from prompt import PROMPT

# API Key for Gemini Model
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))

# Function to get Gemini response (SQL query)
def get_gemini_response(question, prompt, table_name):
    try:
        # Ensure table_name is not empty
        if not table_name:
            table_name = "STUDENT"  # Default table name

        # Replace table name dynamically in the prompt
        updated_prompt = prompt.format(table_name=table_name)

        model = genai.GenerativeModel(model_name="gemini-1.5-flash-8b")
        response = model.generate_content([updated_prompt, question])

        # Ensure response is valid before extracting SQL query
        if not response.candidates or not response.candidates[0].content.parts:
            st.error("Invalid response from Gemini API")
            return None

        sql_query = response.candidates[0].content.parts[0].text.strip()
        return sql_query
    except Exception as e:
        st.error(f"Error fetching response: {e}")
        return None

# Function to convert CSV to SQLite database with dynamic table creation
def csv_to_sqlite(csv_file, db_path, table_name):
    try:
        # Load CSV into a DataFrame
        df = pd.read_csv(csv_file)

        # Check if DataFrame is empty
        if df.empty:
            st.error("CSV file is empty.")
            return

        # Connect to SQLite database
        connection = sqlite3.connect(db_path)

        # Write DataFrame to SQLite table (if table exists, replace it)
        df.to_sql(table_name, connection, if_exists="replace", index=False)

        # Close connection
        connection.close()

        # Success message
        st.success(f"CSV file '{csv_file.name}' has been successfully converted to the database '{db_path}' in the table '{table_name}'.")
    except Exception as e:
        st.error(f"Error converting CSV to database: {e}")

# Function to retrieve query(records) from the database
def read_sql_query(sql, db):
    try:
        conn = sqlite3.connect(db)  # Create connection with the database
        cur = conn.cursor()         # Cursor to execute SQL queries
        cur.execute(sql)            # Run the SQL query
        rows = cur.fetchall()       # Fetch all records
        conn.close()                # Close the connection
        return rows
    except sqlite3.Error as e:
        st.error(f"Database error: {e}")
        return []

# Streamlit UI setup
st.set_page_config(page_title="Chat with CSV", layout="wide")

# Sidebar - CSV Upload
st.sidebar.title("üìÇ Upload CSV to Database")
csv_file = st.sidebar.file_uploader("Upload CSV File", type=["csv"])
table_name = st.sidebar.text_input("Table Name", placeholder="STUDENT")
db_name = st.sidebar.text_input("Database Name", placeholder="student.db")

if csv_file and st.sidebar.button("Convert to Database"):
    csv_to_sqlite(csv_file, db_name, table_name)
    st.sidebar.success("‚úÖ CSV successfully converted to database!")

# Main Section - Q&A
st.title("üí¨ Chat with CSV Data")

st.markdown("""
    <style>
        .big-font { font-size:18px !important; }
        .stButton>button { width: 100%; }
    </style>
""", unsafe_allow_html=True)

st.subheader("Ask a Question About Your Data")
question = st.text_input("üîç Enter your question", key="input")
submit = st.button("Ask the Question")

if submit:
    try:
        response = get_gemini_response(question, PROMPT, table_name)
        if response:
            st.markdown("**üìù Generated SQL Query:**")
            st.code(response, language="sql")

            data = read_sql_query(response, db_name)

            st.subheader("üìä Query Results")
            if data:
                st.write(f"**{data[0][0]}**")   # You can also use `st.dataframe(data)` if structured data
            else:
                st.warning("‚ö†Ô∏è No data returned from the query.")
        else:
            st.error("‚ùå No response generated by Gemini.")
    except Exception as e:
        st.error(f"An unexpected error occurred: {e}")
